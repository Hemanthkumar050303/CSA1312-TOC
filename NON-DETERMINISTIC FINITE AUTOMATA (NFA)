#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int i, j, k, l, m, n;
    int mat[10][10][10]; // Transition table
    int present_state[20], next_state[20];
    int prev_trans, new_trans;
    int num_states, num_symbols, num_final;
    int final_state[5], symbol[5];
    int flag, inp, inp1;
    char input[20];

    printf("How many states in the NFA: ");
    scanf("%d", &num_states);

    printf("How many symbols in the input alphabet: ");
    scanf("%d", &num_symbols);

    for (i = 0; i < num_symbols; i++) {
        printf("Enter the input symbol %d: ", i + 1);
        scanf("%d", &symbol[i]); // Accept only numeric symbols for now
    }

    printf("How many final states: ");
    scanf("%d", &num_final);
    for (i = 0; i < num_final; i++) {
        printf("Enter the final state %d: ", i + 1);
        scanf("%d", &final_state[i]);
    }

    // Initialize transition table
    for (i = 0; i < 10; i++)
        for (j = 0; j < 10; j++)
            for (k = 0; k < 10; k++)
                mat[i][j][k] = -1;

    // Fill the transition table
    for (i = 0; i < num_states; i++) {
        for (j = 0; j < num_symbols; j++) {
            printf("How many transitions from state %d for input %d: ", i, symbol[j]);
            scanf("%d", &n);
            for (k = 0; k < n; k++) {
                printf("Enter transition %d from state %d for input %d: ", k + 1, i, symbol[j]);
                scanf("%d", &mat[i][j][k]);
            }
        }
    }

    // Display the transitions
    printf("\nStored Transitions:\n");
    for (i = 0; i < num_states; i++) {
        for (j = 0; j < num_symbols; j++) {
            for (k = 0; k < 10; k++) {
                if (mat[i][j][k] != -1) {
                    printf("mat[%d][%d][%d] = %d\n", i, j, k, mat[i][j][k]);
                }
            }
        }
    }

    // Loop to process multiple input strings
    while (1) {
        printf("\nEnter the input string (only 0s and 1s): ");
        scanf("%s", input);

        l = strlen(input);
        present_state[0] = 0;
        prev_trans = 1;

        for (i = 0; i < l; i++) {
            if (input[i] == '0')
                inp1 = 0;
            else if (input[i] == '1')
                inp1 = 1;
            else {
                printf("Invalid input character: %c\n", input[i]);
                exit(0);
            }

            // Match symbol index
            for (m = 0; m < num_symbols; m++) {
                if (inp1 == symbol[m]) {
                    inp = m;
                    break;
                }
            }

            new_trans = 0;

            for (j = 0; j < prev_trans; j++) {
                k = 0;
                int p = present_state[j];
                while (mat[p][inp][k] != -1) {
                    next_state[new_trans++] = mat[p][inp][k];
                    k++;
                }
            }

            for (j = 0; j < new_trans; j++) {
                present_state[j] = next_state[j];
            }
            prev_trans = new_trans;

            if (prev_trans == 0)
                break; // No valid transitions, early exit
        }

        flag = 0;
        for (i = 0; i < prev_trans; i++) {
            for (j = 0; j < num_final; j++) {
                if (present_state[i] == final_state[j]) {
                    flag = 1;
                    break;
                }
            }
        }

        if (flag == 1)
            printf("Accepted ?\n");
        else
            printf("Not accepted ?\n");

        printf("Try another input? (Ctrl+C to exit)\n");
    }

    return 0;
}
